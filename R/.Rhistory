load("C:/Users/user/2020_programmingcamp/R/3day.rda")
mpg <- as.data.frame(ggplot2::mpg)
mpg
library("dplyr", lib.loc="~/R/win-library/3.3")
df_raw <- data.frame(var1 =c(1,2,1), var2 = c(2,3,2))
df_raw
df_new <- df_raw
df_new
df_new <- rename(df_new, v2 = var2)
df_new
df$varsum <- df$var1 + df$var2
df
df$var_sum <- df$var1 + df$var2
df
df_raw$var_sum <- df$var1 + df$var2
df_raw
df_raw$var_sum <- df$var1 + df$var2
df_raw$var_sum <- df_raw$var1 + df_raw$var2
df_raw
df_raw$var_mean <- df$var_sum / 2
df_raw$var_mean <- df_raw$var_sum / 2
df_raw
mpg$total <- (mpg$cty + mpg$hwy)/2
head(mpg)
hist(mpg$total)
mpg$test <- ifelse(mpg$total >= 20, "pass", "fail")
head(mpg,20)
table(mpg$grade)
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 20, "B", "C"))
head(mpg,20)
table(mpg$grade)
qplot(mpg$grade)
qqplot(mpg$grade)
library(qqplot2)
qplot(mpg$grade)
library(qqplot2)
library(ggplot2)
qplot(mpg$test)
qplot(mpg$grade)
ifelse(mpg$total >=20, "C", "D" ))
mpg$grade <- ifelse(mpg$total >= 30, "A",
ifelse(mpg$total >= 25, "B",
ifelse(mpg$total >=20, "C", "D" )))
table(mpg$grade)
library(ggplot2)
qplot(mpg$grade)
library(dplyr)
exam <- read.csv("csv_exam.csv")
exam
exam <- read.csv("csv_exam.csv")
exam
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")
exam
exam %>% filter(class ==1)
exam
exam.c1 = exam %>% filter(class ==1)
exam.c1
exam %>% filter(class ==1 & math >= 50)
exam %>% filter(english >=1 | math >= 50)
exam %>% filter(english >=90 | math >= 90)
exam %>% filter(english >=90 | math >= 90)
exam %>% filter(class %in% c(1,3,5))
exam %>% select(math)
exam %>% select(-math)
exam %>% select(class, math, english)
exam %>% select(-c(math, english))
exam %>%
filter(class ==1 ) %>%
select(english)
exam %>%
select(id, math) %>%
head()
exam %>%
arrange(math)
exam %>%
arrange(math)  #기본값은 오름차수
exam %>%
arrange(desc(math))
exam %>%
arrange(desc(math))
exam %>%
arrange(class, desc(math))
exam %>%mutate(total = math+english+science)
exam %>%mutate(total = math+english+science,
mean=(math+english+science)/3) %>%
head
exam %>%
mutate(test=ifelse(science>=60,"pass","fail")) %>%
head
exam %>%
group_by(class) %>%
summarise(mean_mean = mean(math))
exam %>%
group_by(class) %>%
exam %>%
group_by(class)
exam %>%
group_by(class)
exam %>%
group_by(class) %>%
summarise(mean_mean = mean(math))
exam %>%
group_by(class) %>%
summarise(mean_math = mean(math),
sum_math=sum(math),
median_math = median(math),
n=n())
mpg %>%
group_by(manufactuer, drv)
mpg %>%
group_by(manufacturer, drv)
mpg %>%
group_by(manufacturer, drv) %>%
summarise(mean_city = mean(cty)) %>%
head(10)
mpg %>%
filter(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == "suv")
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv')
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2)
head(5)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2) %>%
summarise(mean_tot = mean(tot)) %>%
head(5)
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv') %>%
mutate(tot = (cty+hwy)/2) %>%
summarise(mean_tot = mean(tot)) %>%
arrange((desc(mean_tot))) %>%
head(5)
mpg
mpg
mpg %>%
group_by(manufacturer) %>%
filter(class == 'suv')
total <- left_join(test1, test2, by = "di")
total <- left_join(test1, test2, by = "id")
#데이터 합치기
test1 <- data.frame(id = c(1,2,3,4,5),
midterm = c(60,80,70,90,85))
test2 <- data.frame(id = c(1,2,3,4,5),
final = c(70,83,65,95,80))
total <- left_join(test1, test2, by = "id")
total
df <- data.frame(sex = c("M", "F", NA, "M", "F"),
score = c(5, 4, 3, 4, NA))
df
is.na(df)
table(is.na(df))
df_nomiss2 <- na.omit(df)
df_nomiss2
mean(df$score, na.rm = T)  # 결측치 제외하고 평균 산출
df
sum(df$score, na.rm = T)   # 결측치 제외하고 합계 산출
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")
exam[c(3,8,5), "math"] <- NA
exam
exam %>% summarise(mean_math = mean(math))
exam %>% summarise(mean_math = mean(math, na.rm =T))
exam[c(3,8,15), "math"] <- NA
exam %>% summarise(mean_math = mean(math, na.rm =T))
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")
exam[c(3,8,15), "math"] <- NA
exam %>% summarise(mean_math = mean(math))
exam %>% summarise(mean_math = mean(math, na.rm =T))
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
exam$math <- ifelse(is.na(exam$math), 55, exam$math)
table(is.na(exam$math))
mean(exam$math)
#이상한 데이터 찾기. 정상범위 벗어나느 것
mpg <- as.data.frame(ggplot2::mpg)
boxplot(mpg$hwy)
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_bar()
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_area()
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) + geom_point()
# 배경에 산점도 추가
ggplot(data = mpg, aes(x = displ, y = hwy)) +
geom_point()
df_mpg <- mpg %>%
group_by(drv) %>%
summarise(mean_hwy = mean(hwy))
df_mpg
ggplot(data=df_mpg , aes(x=drv, y= mean_hwy))
ggplot(data=df_mpg , aes(x=drv, y= mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_bar()
ggplot(data = df_mpg, aes(x = drv, y = mean_hwy)) + geom_blank()
ggplot(data = df_mpg, aes(x = reorder(drv, y = mean_hwy)) + geom_blank()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy) y = mean_hwy)) + geom_blank()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_blank()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
ggplot2(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
ggplot(data = mpg,aes(x=drv)) + geom_bar()
ggplot(data = mpg,aes(x=hwy)) + geom_bar()
economics
economics
ggplot(data=economics, aes(x=date, y=unemploty))+geom_line()
ggplot(data=economics, aes(x=date, y=unemploy))+geom_line()
libarary(foreign)
library(foreign)
raw_welfare <- read.spss(file= "C:/Users/user/20202_programming/datas/Data/Koweps_hpc10_2015_beta1.sav")
raw_welfare <- read.spss(file= "C:/Users/user/20202_programming/datas/Data/Koweps_hpc10_2015_beta1.sav", to.data.frame = T)
welfare <-raw_welfare
tail(welfare)
dim(welfare)
head(welfare)
str(welfare)
summary(welfare)
welfare <- rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_req7)
welfare <- rename(welfare,
sex = h10_g3,
birth = h10_g4,
marriage = h10_g10,
religion = h10_g11,
income = p1002_8aq1,
code_job = h10_eco9,
code_region = h10_reg7)
table(welfare$sex)
class(welfare$sex)
table(welfare$sex)
table(is.na(welfare$sex))
welfare$sex <- ifelse(welfare$sex == 1, "male", "female")
table(welfare$sex)
qplot(welfare$sex)
welfare$income
class(welfare$income)
table(welfare$income)
summary(welfare$income)
qplot(welfare$income)
qplot(welfare$income) + xlim(0,1000)
table(is.na(welfare$income))
welfare$income <- ifelse(welfare$income %in% c(0,9999),
NA, welfare$income)
table(is.na(welfare$income))
sex_income <- welfare %>%
filter(!is.na(income)) %>%
group_by(sex) %>%
summarise(mean_income = mean(income))
sex_income
ggplot(data = sex_income, aes(x=sex,y=mean_income))+
geom_col
pal <- brewer.pal(8,"Dark2")       # 색상 목록 생성
set.seed(1234)                     # 난수 고정
wordcloud(words = df_word$word,    # 단어
freq = df_word$freq,     # 빈도
min.freq = 10,           # 최소 단어 빈도
max.words = 200,         # 표현 단어 수
random.order = F,        # 고빈도 단어 중앙 배치
rot.per = .1,            # 회전 단어 비율
scale = c(6, 0.2),       # 단어 크기 범위
colors = pal)            # 색상 목록
install.packages("wordcloud")
# 패키지 로드
library(wordcloud)
## Loading required package: RColorBrewer
library(RColorBrewer)
pal <- brewer.pal(8,"Dark2")       # 색상 목록 생성
set.seed(1234)                     # 난수 고정
install.packages("wordcloud")
# 패키지 로드
library(wordcloud)
## Loading required package: RColorBrewer
library(RColorBrewer)
pal <- brewer.pal(8,"Dark2")       # 색상 목록 생성
set.seed(1234)                     # 난수 고정
wordcloud(words = df_word$word,    # 단어
freq = df_word$freq,     # 빈도
min.freq = 10,           # 최소 단어 빈도
max.words = 200,         # 표현 단어 수
random.order = F,        # 고빈도 단어 중앙 배치
rot.per = .1,            # 회전 단어 비율
scale = c(6, 0.2),       # 단어 크기 범위
colors = pal)            # 색상 목록
colors = pal)            # 색상 목록
install.packages("wordcloud")
library(RColorBrewer)
pal <- brewer.pal(8,"Dark2")       # 색상 목록 생성
set.seed(1234)                     # 난수 고정
wordcloud(words = df_word$word,    # 단어
freq = df_word$freq,     # 빈도
min.freq = 10,           # 최소 단어 빈도
max.words = 200,         # 표현 단어 수
random.order = F,        # 고빈도 단어 중앙 배치
rot.per = .1,            # 회전 단어 비율
scale = c(6, 0.2),       # 단어 크기 범위
colors = pal)            # 색상 목록
#googlemap ggmap
if(!require(ggmap)){
install.packages("ggmap")
library(ggmap)
}
ggplot(data = df_mpg, aes(x = reorder(drv, -mean_hwy), y = mean_hwy)) + geom_col()
register_google("")
register_google("googlemap사이트에서 만든 key값 입력해주면 됨.")
gg_daegu <- get_googlemap("동대구역", maptype="roadmap", zoom=13)
ggmap(gg_daegu)
ggplot(data=sex_income,aes(x=sex,y=mean_income)) + geom_col()
if(!require(ggmap)) {
install.packages("ggmap")
library(ggmap)
}
register_google("YOUR_API_KEY")
gg_daegu <- get_googlemap("대구경북과학기술원", maptype="roadmap", zoom=13)
ggmap(gg_daegu)
ggplot(data=sex_income,aes(x=sex,y=mean_income)) + geom_col()
if(!require(ggmap)) {
install.packages("ggmap")
library(ggmap)
}
register_google("YOUR_API_KEY")
gg_daegu <- get_googlemap("대구경북과학기술원", maptype="roadmap", zoom=13)
ggmap(gg_daegu)
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>%mutate(total = math+english+science,
mean=(math+english+science)/3) %>%
arrange(class, desc(math))
exam %>% mutate(total = math+english+science,
mean=(math+english+science)/3) %>%
arrange(class, desc(math))
exam %>% mutate(total = math+english+science
exam %>% mutate(total = math+english+science,
mean=(math+english+science)/3)
+
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>% mutate(total = math+english+science,
mean=(math+english+science)/3) %>%
exam %>% arrange(class, desc(total))
write.csv(df_midterm, file = "df_midterm.csv")  # CSV 파일로 저장하기
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>% mutate(total = math+english+science,
mean=(math+english+science)/3) %>%
exam %>% arrange(class, desc(total))
write.csv(exam, file = "exam.csv")  # CSV 파일로 저장하기
nce,
mean=(math+english+science
exam %>% mutate(total = math+english+science,
mean=(math+english+science)/3)
exam %>% mutate(total = math+english+science),
mean=(math+english+science)/3)
exam %>%   mutate(total = math + english + science,
mean = (math + english + science)/3)
library(dplyr)
library(dplyr)
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>%   mutate(total = math + english + science,
mean = (math + english + science)/3)
exam %>% arrange(class, desc(total))
write.csv(exam, file = "exam.csv")  # CSV 파일로 저장하기
library(dplyr)
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>%   mutate(total = math + english + science,
mean = (math + english + science)/3)
exam %>% arrange(desc(math))
write.csv(exam, file = "exam.csv")  # C
library(dplyr)
exam <- read.csv("C:/Users/user/20202_programming/datas/Data/csv_exam.csv")            # 데이터 불러오기
exam %>%   mutate(total = math + english + science,
mean = (math + english + science)/3) %>%
arrange(desc(math))
write.csv(exam, file = "exam.csv")  # CSV 파일로 저장하기
